#lang ivy1.7

#define red/black node types and colour field to receive
type node
type colour = {0,r,b}

#Give colours to the processes
relation black(X:node)
relation red(X:node)

#define left/right
individual left(X:node) : node
individual right(X:node): node

#axiomatize left/right
axiom black(X) <-> ~red(X)  #at most one colour
axiom black(X) | red(X)     #at least one colour
axiom black(X) <-> (red(left(X)) & red(right(X))) #leaves EPR... must run with complete=fo option to run.
axiom red(X) <-> (black(left(X)) & black(right(X)))

#axiom red(X) -> ~red(right(X))


#give var field to r/b nodes
individual var1(X:node) : colour

after init
{
    var1(X) := 0;
}

action t(n1:node,n2:node) = {
    assume right(n1)=n2;
    if(black(n1))
    {
        var1(n2) := r
    }
    else
    {
        var1(n2) := b
    }
}

export t

#Safety property
conjecture red(X) -> var1(X)~=b
